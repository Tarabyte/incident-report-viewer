{"version":3,"sources":["components/FilePicker.js","components/FileList.js","App.js","serviceWorker.js","index.js"],"names":["FilePicker","_ref","onFile","onDrop","useCallback","files","Object","toConsumableArray","forEach","file","reader","FileReader","addEventListener","e","name","content","target","result","readAsText","_useDropzone","useDropzone","getRootProps","getInputProps","react_default","a","createElement","className","parser","DOMParser","Img","data","rootClassName","props","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","magnified","setMagnified","ref","useRef","useEffect","listener","current","contains","document","removeEventListener","onClick","console","log","stopPropagation","classNames","assign","src","concat","alt","FileList","_ref2","onRemove","map","str","parseFromString","knownNodes","Set","key","role","aria-label","querySelector","childNodes","filter","node","nodeType","ELEMENT_NODE","has","nodeName","textContent","FileList_Img","querySelectorAll","extra","i","length","colSpan","App","setFiles","src_components_FilePicker","item","src_components_FileList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95c95421.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport './FilePicker.css'\r\n\r\nconst FilePicker = ({ onFile }) => {\r\n  const onDrop = useCallback(\r\n    files =>\r\n      [...files].forEach(file => {\r\n        const reader = new FileReader()\r\n\r\n        reader.addEventListener('load', e => {\r\n          onFile({\r\n            name: file.name,\r\n            content: e.target.result,\r\n          })\r\n        })\r\n\r\n        reader.readAsText(file)\r\n      }),\r\n    [onFile],\r\n  )\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({ onDrop })\r\n\r\n  return (\r\n    <div {...getRootProps({ className: 'filepicker' })}>\r\n      <input {...getInputProps()} />\r\n      <p>\r\n        Перетащите один или несколько XML файлов с отчетами или нажмите, чтобы\r\n        выбрать.\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nFilePicker.propTypes = {\r\n  onFile: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default FilePicker\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport classNames from 'classnames'\r\n\r\nimport './FileList.css'\r\n\r\nconst parser = new DOMParser()\r\nconst parse = str => parser.parseFromString(str, 'application/xml')\r\n\r\nconst Img = ({ data, rootClassName, ...props }) => {\r\n  const [magnified, setMagnified] = useState(false)\r\n\r\n  const toggle = e => {\r\n    console.log('toggle')\r\n    e.stopPropagation()\r\n    setMagnified(magnified => !magnified)\r\n  }\r\n\r\n  const ref = useRef(null)\r\n\r\n  useEffect(() => {\r\n    if (magnified) {\r\n      const listener = e => {\r\n        if (!ref.current || ref.current.contains(e.target)) {\r\n          return\r\n        }\r\n\r\n        setMagnified(false)\r\n      }\r\n      document.addEventListener('click', listener)\r\n\r\n      return () => document.removeEventListener('click', listener)\r\n    }\r\n  }, [magnified])\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      onClick={toggle}\r\n      className={classNames(\r\n        'filelist-img-container',\r\n        rootClassName,\r\n        magnified && 'filelist-img-container__magnified',\r\n      )}\r\n    >\r\n      <img src={`data:image/png;base64,${data}`} alt=\"\" {...props} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst FileList = ({ files, onRemove }) => (\r\n  <table className=\"filelist\">\r\n    <thead>\r\n      <tr>\r\n        <th>Название</th>\r\n        <th>Распознанные данные</th>\r\n        <th>Номер</th>\r\n        <th>Т/С</th>\r\n        <th>Дополнительные изображения</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {files.map(file => {\r\n        const document = parse(file.content)\r\n\r\n        const knownNodes = new Set(['v_photo_grz', 'v_photo_ts'])\r\n        return (\r\n          <tr key={file.name}>\r\n            <td>\r\n              {file.name}{' '}\r\n              <button\r\n                className=\"filelist-remove\"\r\n                onClick={() => onRemove(file.name)}\r\n              >\r\n                <span role=\"img\" aria-label=\"remove\">\r\n                  ❎\r\n                </span>\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <ul>\r\n                {[...document.querySelector('tr_checkIn').childNodes]\r\n                  .filter(\r\n                    node =>\r\n                      node.nodeType === node.ELEMENT_NODE &&\r\n                      !knownNodes.has(node.nodeName),\r\n                  )\r\n                  .map(node => (\r\n                    <li key={node.nodeName}>\r\n                      {node.nodeName} - {node.textContent}\r\n                    </li>\r\n                  ))}\r\n              </ul>\r\n            </td>\r\n            <td>\r\n              <Img\r\n                data={document.querySelector('v_photo_grz').textContent}\r\n                alt=\"Номер\"\r\n              />\r\n            </td>\r\n            <td>\r\n              <Img\r\n                data={document.querySelector('v_photo_ts').textContent}\r\n                alt=\"Транспортное средство\"\r\n                rootClassName=\"filelist-img__main\"\r\n              />\r\n            </td>\r\n            <td>\r\n              {[...document.querySelectorAll('v_photo_extra')].map(\r\n                (extra, i) => (\r\n                  <Img\r\n                    key={i}\r\n                    data={extra.textContent}\r\n                    alt=\"Дополнительное фото\"\r\n                    rootClassName=\"filelist-img__additional\"\r\n                  />\r\n                ),\r\n              )}\r\n            </td>\r\n          </tr>\r\n        )\r\n      })}\r\n      {files.length === 0 && (\r\n        <tr>\r\n          <td colSpan={5} className=\"filelist-empty\">\r\n            Нет файлов\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nexport default FileList\r\n","import React, { useState } from 'react'\nimport './App.css'\nimport FilePicker from './components/FilePicker'\nimport FileList from './components/FileList'\n\nfunction App() {\n  const [files, setFiles] = useState([])\n\n  const addFile = file => {\n    setFiles(files => [file, ...files.filter(item => item.name !== file.name)])\n  }\n\n  const removeFile = name =>\n    setFiles(files => files.filter(file => file.name !== name))\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <FilePicker onFile={addFile} />\n      </header>\n\n      <main className=\"app-main\">\n        <FileList files={files} onRemove={removeFile} />\n      </main>\n      <footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}